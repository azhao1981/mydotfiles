#!/bin/bash
MY_BRANCH=feature_im_sdk_push
DEPLOY_BRANCH=qa_feature_im_sdk_push_with_repository_richtext
MERGE_BRANCHS="master feature/repository_richtext"
DEPLOY_TARGET=test_udmonkey
DEPLOY_TARGET2=test_udeskmonkey

cd ~/udesk/udesk_im
if [[ "$1" = 'init' ]]; then
    set -x \
    && git checkout -B $MY_BRANCH \
    && git checkout -B $DEPLOY_BRANCH \
    && for branch in $MERGE_BRANCHS ; do
        echo "$DEPLOY_BRANCH merge $branch"
        git checkout -B $branch
        git checkout -B $DEPLOY_BRANCH
        git merge $branch
    done \
    && git push -u origin $DEPLOY_BRANCH  \
    && git checkout -B $MY_BRANCH
    exit 0
else
    set -x \
    && for branch in $MERGE_BRANCHS ; do
        echo "$DEPLOY_BRANCH merge $branch"
        git checkout -B $branch
        git checkout -B $DEPLOY_BRANCH
        git merge $branch
    done \
    && git checkout -B $DEPLOY_BRANCH \
    && git merge $MY_BRANCH \
    && git push -u origin $DEPLOY_BRANCH \
    && bundle exec cap $DEPLOY_TARGET deploy
    git checkout $MY_BRANCH
fi


cd ~/udesk/udesk_proj
if [[ "$1" = 'init' ]]; then
    set -x \
    && git checkout -B $MY_BRANCH \
    && git checkout -B $DEPLOY_BRANCH \
    && for branch in $MERGE_BRANCHS ; do
        echo "$DEPLOY_BRANCH merge $branch"
        git checkout -B $branch
        git checkout -B $DEPLOY_BRANCH
        git merge $branch
    done \
    && git push -u origin $DEPLOY_BRANCH  \
    && git checkout -B $MY_BRANCH
    exit 0
else
    set -x \
    && for branch in $MERGE_BRANCHS ; do
        echo "$DEPLOY_BRANCH merge $branch"
        git checkout -B $branch
        git checkout -B $DEPLOY_BRANCH
        git merge $branch
    done \
    && git checkout -B $DEPLOY_BRANCH \
    && git merge $MY_BRANCH \
    && git push -u origin $DEPLOY_BRANCH \
    && bundle exec cap $DEPLOY_TARGET2 deploy
    git checkout $MY_BRANCH
fi
